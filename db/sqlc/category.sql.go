// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: category.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCategory = `-- name: CreateCategory :execresult
INSERT INTO category (
  category_name, status, created_at, updated_at
) VALUES (
  ?, ?, ?, ?
)
`

type CreateCategoryParams struct {
	CategoryName string    `json:"category_name"`
	Status       string    `json:"status"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCategory,
		arg.CategoryName,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getCategory = `-- name: GetCategory :one
SELECT id, category_name, status, updated_at, created_at FROM category
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, category_name, status, updated_at, created_at FROM category
WHERE category_name=? LIMIT 1
`

func (q *Queries) GetCategoryByName(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByName, categoryName)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.CategoryName,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, category_name, status, updated_at, created_at FROM category
ORDER BY category_name
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.CategoryName,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE category
SET category_name=?, status=?, updated_at=?
WHERE id=?
`

type UpdateCategoryParams struct {
	CategoryName string    `json:"category_name"`
	Status       string    `json:"status"`
	UpdatedAt    time.Time `json:"updated_at"`
	ID           int32     `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory,
		arg.CategoryName,
		arg.Status,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
