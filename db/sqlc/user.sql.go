// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  username, password, created_at, updated_at, role_id
) VALUES (
  ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	RoleID    int32     `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RoleID,
	)
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, updated_at, created_at, role_id FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.RoleID,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, updated_at, created_at, role_id FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Users
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
SELECT id, role_id FROM users
WHERE username = ? and password = ?
`

type LoginUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type LoginUserRow struct {
	ID     int32 `json:"id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Username, arg.Password)
	var i LoginUserRow
	err := row.Scan(&i.ID, &i.RoleID)
	return i, err
}
