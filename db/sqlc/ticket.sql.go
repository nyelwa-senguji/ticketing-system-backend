// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: ticket.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTicket = `-- name: CreateTicket :execresult
INSERT INTO tickets (
    subject, description, status, updated_at, created_at, user_id, category_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateTicketParams struct {
	Subject     string    `json:"subject"`
	Description string    `json:"description"`
	Status      string    `json:"status"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedAt   time.Time `json:"created_at"`
	UserID      int32     `json:"user_id"`
	CategoryID  int32     `json:"category_id"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTicket,
		arg.Subject,
		arg.Description,
		arg.Status,
		arg.UpdatedAt,
		arg.CreatedAt,
		arg.UserID,
		arg.CategoryID,
	)
}

const getTicket = `-- name: GetTicket :one
SELECT id, subject, description, status, updated_at, created_at, user_id, category_id FROM tickets
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTicket(ctx context.Context, id int32) (Tickets, error) {
	row := q.db.QueryRowContext(ctx, getTicket, id)
	var i Tickets
	err := row.Scan(
		&i.ID,
		&i.Subject,
		&i.Description,
		&i.Status,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.UserID,
		&i.CategoryID,
	)
	return i, err
}

const listTickets = `-- name: ListTickets :many
SELECT id, subject, description, status, updated_at, created_at, user_id, category_id FROM tickets
ORDER BY id
`

func (q *Queries) ListTickets(ctx context.Context) ([]Tickets, error) {
	rows, err := q.db.QueryContext(ctx, listTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tickets
	for rows.Next() {
		var i Tickets
		if err := rows.Scan(
			&i.ID,
			&i.Subject,
			&i.Description,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UserID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTickets = `-- name: SearchTickets :many
SELECT id, subject, description, status, updated_at, created_at, user_id, category_id FROM tickets
WHERE subject LIKE '%?%'
`

func (q *Queries) SearchTickets(ctx context.Context) ([]Tickets, error) {
	rows, err := q.db.QueryContext(ctx, searchTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tickets
	for rows.Next() {
		var i Tickets
		if err := rows.Scan(
			&i.ID,
			&i.Subject,
			&i.Description,
			&i.Status,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.UserID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
